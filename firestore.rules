rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read/write their own data
    match /users/{userId} {
      // Allow users to read their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow authenticated users to read basic profile info (needed for group functionality)
      allow read: if request.auth != null;
    }

    // Group members can read/write group data
    match /groups/{groupId} {
      // Allow creation of new groups by authenticated users
      allow create: if request.auth != null;
      // Allow read for authenticated users (needed to find groups by code)
      allow read: if request.auth != null;
      // Allow write for existing members OR for users adding themselves to the group
      allow write: if request.auth != null &&
        (request.auth.uid in resource.data.members || 
         request.auth.uid in request.resource.data.members);
      
      // Daily winners subcollection - group members can read
      match /dailyWinners/{date} {
        allow read: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
        // Only Cloud Functions can write to dailyWinners
        allow write: if false;
      }
    }

    // Fits - allow authenticated users to read/write fits
    // Group membership filtering is handled client-side for better performance
    match /fits/{fitId} {
      // Allow creation of new fits by authenticated users
      allow create: if request.auth != null;
      // Allow read/write for authenticated users (group filtering done client-side)
      allow read, write: if request.auth != null;
    }

    // Ratings by group members only (for Cloud Functions)
    match /ratings/{ratingId} {
      // Allow creation of new ratings by authenticated users
      allow create: if request.auth != null;
      // Allow read/write for existing ratings by group members
      allow read, write: if request.auth != null &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members;
    }

    // Comments by group members only (for Cloud Functions)
    match /comments/{commentId} {
      // Allow creation of new comments by authenticated users
      allow create: if request.auth != null;
      // Allow read/write for existing comments by group members
      allow read, write: if request.auth != null &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members;
    }

    // Notifications user-specific
    match /notifications/{notificationId} {
      // Allow creation of new notifications by authenticated users
      allow create: if request.auth != null;
      // Allow read/write for existing notifications by the recipient
      allow read, write: if request.auth != null &&
        request.auth.uid == resource.data.userId;
    }

    // Notification queues - only Cloud Functions can write, users can read their own
    match /notificationQueues/{queueId} {
      allow read: if request.auth != null &&
        request.auth.uid == resource.data.userId;
      // Only Cloud Functions can write to notification queues
      allow write: if false;
    }

    // App config - read-only for authenticated users
    match /appConfig/{configId} {
      allow read: if request.auth != null;
      // Only Cloud Functions can write to app config
      allow write: if false;
    }

    // Legacy dailyWinners collection - keep for migration period
    match /dailyWinners/{docId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == resource.data.userId;
    }
  }
}